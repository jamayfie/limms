% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/imputeZerosUnifMin.R
\name{imputeZerosUnifMin}
\alias{imputeZerosUnifMin}
\title{Imputation of zeros using random minima}
\usage{
imputeZerosUnifMin(x, output = "log2", intensities = 1:ncol(x), seed = 99)
}
\arguments{
\item{x}{An R object containing the data to be imputed arranged in
columns.}

\item{output}{Either "log2" or "imputed".  Defaults to "log2".}

\item{intensities}{Column range containing the mass spectrometry peak intensities. 
Enter the columns containing intensity data by number, for example 24:69 in the CBS data,
or enter by column names.  
Defaults to using all columns, which only works if the input contains only intensity data.}

\item{seed}{Change the seed for consistent output.}
}
\value{
If the output is set to "log2", the default, x is returned
as a data table plus appended columns with a ".log2" suffix for each
column specified in the "intensities" argument.
Zeros are replaced and intensity values log2 transformed in these columns.
If the output is set to "imputed", x is returned with columns appended 
and a ".imputed" suffix added for each column in the "intensities" argument.
Zeros are replaced in these columns without transformation.
}
\description{
This function addreses zero values by imputation.
For convenience, it can also log2 transform the data.
}
\details{
The minimum value within each column is calculated.
Zero values are replaced at random by runif, such that
imputed values are between 0 and the column minimum.
Log transformation of data is preferred for downstream analysis, and is
implemented here for convenience.
Minimum intensities < 1 are possible; hence, to avoid negative log2 values,
1 is added to all intensities prior to log2 transformation.
}
\note{
Due to the random replacement of zeros, imputed values will change 
each time the function is called.  The seed argument calls set.seed() 
to maintain consistent values, but should be changed from the default.
}
\examples{

require(data.table)

# For the CBS dataset included as limms package data, 
# the xcms diffreport CBS.xcms_diffreport, 
# choose columns with data, for example, 24 to 55 contain non-spiked samples.

# Return imputed values using:
imputeZerosUnifMin(CBS.xcms_diffreport, intensities=24:55, seed=890, output="log2")

# Return lists of imputed values and minima.
imputeZerosUnifMin(CBS.xcms_diffreport, intensities=24:55, seed=890, output="impounded")

# To store imputed, log transformed values, call to a new object
# Change the seed, 478, to a different number for each new data set.
all.i_l <- imputeZerosUnifMin(CBS.xcms_diffreport, intensities=24:55, seed=478)

# The imputed measurements can be flagged and counted.
metimp <- t(sapply(1:dim(CBS.xcms_diffreport)[1], function(i) CBS.xcms_diffreport[i, 24:55]==0))
numimp <- sapply(1:dim(CBS.xcms_diffreport)[1], function(i) length(which(metimp[i,]=="TRUE")))

# Quick QC according to the number of impounded measurements
# which peaks have no samples with impounded zeros?
summary(numimp == 0)
# which peaks have > 5 impounded?
summary(numimp > 5)

lcids <- sapply(1:dim(CBS.xcms_diffreport)[1], function(i) 
  paste(as.character(
    colnames(CBS.xcms_diffreport[, 24:55])[which(CBS.xcms_diffreport[i, 24:55]==0)]),
    collapse="; "))

# Generate a table with information about impounded measurements
# including how many and which samples were impounded for each metabolite
xi <- data.table(cbind(numimp,lcids))
head(xi)
}
\seealso{
\code{\link{runif}}
\code{\link{runNorm}}

Other limms: 
\code{\link{limmaTest}()},
\code{\link{runNorm}()}
}
\concept{limms}
